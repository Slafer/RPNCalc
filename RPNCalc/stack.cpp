#include "stack.h"

void push(elem*& top, char x)
{
	//Создаем элемент стека (размещаем в памяти)
	elem* new_el = new elem;
	new_el->x = x;
	//Изменяем указатель на следующий элемент стека
	new_el->next = top;
	//Корректируем указатель на вершину стека
	top = new_el;
}

bool pop(elem*& top, char& x)
{
	//Проверка стека на пустоту
	if (!top) return false;
	//Сохранение значения элемента стека
	x = top->x;
	//Сохранение указателя на текущую вершину во временной переменной
	elem* old_el = top;
	//Изменение вершины стека
	top = top->next;
	//Очищаем память из-под удаляемого элемента
	delete old_el;
	return true;
}

bool peek(const elem* top, char& x)
{
	//Проверка стека на пустоту
	if (!top) return false;
	//Сохранение значения элемента стека
	x = top->x;	
	return true;
}

void clear(elem*& top)
{
	char x;
	while (top) pop(top, x);
}
void push(elem_i*& top, double x)
{
	//Создаем элемент стека (размещаем в памяти)
	elem_i* new_el = new elem_i;
	new_el->x = x;
	//Изменяем указатель на следующий элемент стека
	new_el->next = top;
	//Корректируем указатель на вершину стека
	top = new_el;
}

bool pop(elem_i*& top, double& x)
{
	//Проверка стека на пустоту
	if (!top) return false;
	//Сохранение значения элемента стека
	x = top->x;
	//Сохранение указателя на текущую вершину во временной переменной
	elem_i* old_el = top;
	//Изменение вершины стека
	top = top->next;
	//Очищаем память из-под удаляемого элемента
	delete old_el;
	return true;
}

bool peek(const elem_i* top, double& x)
{
	//Проверка стека на пустоту
	if (!top) return false;
	//Сохранение значения элемента стека
	x = top->x;
	return true;
}

void clear(elem_i*& top)
{
	double x;
	while (top) pop(top, x);
}